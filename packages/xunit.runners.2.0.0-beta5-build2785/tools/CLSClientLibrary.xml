<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CLSClientLibrary</name>
    </assembly>
    <members>
        <member name="T:CLSCLientLibrary.CloudLoggerServiceFactory">
            <summary>
            Use this API to create an instance of ICloudLoggingService. This is like factory API for the actual service
            </summary>
        </member>
        <member name="M:CLSCLientLibrary.CloudLoggerServiceFactory.GetLoggingService(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of ICloudLoggingService. This can throw an InvalidTokenException if invalid token is passed
            </summary>
            <param name="token">Authentication token of the consumer</param>
            <param name="appname">Applicaiton name which is using the library</param>
            <param name="appcontext">Application context in which the library is used</param>
            <param name="configurationFilepath">Path to the configuration file</param>
            <returns>an instance of ICloudLoggingService</returns>
        </member>
        <member name="M:CLSCLientLibrary.CloudLoggerServiceFactory.GetLoggingService(System.String,System.String,System.String,System.String,CLSCLientLibrary.Interface.ICLSLogger)">
            <summary>
            Creates an instance of ICloudLoggingService. This can throw an InvalidTokenException if invalid token is passed
            </summary>
            <param name="token">Authentication token of the consumer</param>
            <param name="appname">Applicaiton name which is using the library</param>
            <param name="appcontext">Application context in which the library is used</param>
            <param name="configurationFilepath">Path to the configuration file</param>
            <param name="logger">External logger to which messages will be logged</param>
            <returns>an instance of ICloudLoggingService</returns>
        </member>
        <member name="M:CLSCLientLibrary.Interface.ICLSWebRequest.SendDataAsync(System.Uri,System.String,System.Action{CLSCLientLibrary.Status})">
            <summary>
            Posts data to the server Asynchronously
            </summary>
            <param name="url">url to be sent to server</param>
            <param name="data">data to be sent to server</param>
            <param name="callBack">callback to be invoked once response is received</param>
        </member>
        <member name="M:CLSCLientLibrary.Interface.ICLSWebRequest.SendDataSync(System.Uri,System.String)">
            <summary>
            Posts data to the server synchronously
            </summary>
            <param name="url">url that the request has to be sent</param>
            <param name="data"></param>
            <returns>Response from server</returns>
        </member>
        <member name="T:CLSCLientLibrary.Interface.ICLSLogger">
            <summary>
            Provides methods for logger
            </summary>
        </member>
        <member name="M:CLSCLientLibrary.Interface.ICLSLogger.LogMessage(CLSCLientLibrary.MessageType,System.String,System.Object[])">
            <summary>
            Log the message with the provided details
            </summary>
            <param name="type">type of the log message</param>
            <param name="message">message to be logged. This can be formatted message like "message{0}"</param>
            <param name="args">supplies arguments to the message</param>
        </member>
        <member name="M:CLSCLientLibrary.Interface.ICLSLogger.LogErrorMessage(System.String,System.Object[])">
            <summary>
            Log the Error message with the provided details
            </summary>
            <param name="message">message to be logged. This can be formatted message like "message{0}"</param>
            <param name="args">supplies arguments to the message</param>
        </member>
        <member name="M:CLSCLientLibrary.Interface.ICLSLogger.LogDebugMessage(System.String,System.Object[])">
            <summary>
            Log the message only in debug builds with the provided details
            </summary>
            <param name="message">message to be logged. This can be formatted message like "message{0}"</param>
            <param name="args">supplies arguments to the message</param>
        </member>
        <member name="P:CLSCLientLibrary.Interface.ICLSLogger.Successor">
            <summary>
            Specify the additional logger that the messages needs to be logged
            </summary>
        </member>
        <member name="T:CLSCLientLibrary.Interface.ICloudLoggingService">
            <summary>
            Provides a mechanism for uploading data to Cloud Logging Service
            </summary>
        </member>
        <member name="M:CLSCLientLibrary.Interface.ICloudLoggingService.LogAsync(System.String,System.String,CLSCLientLibrary.MessageType,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Action{CLSCLientLibrary.CLSResponse})">
            <summary>
            Uploads data to Cloud Logging Service Asynchronously. This API is preferred if it is invoked from  Main Thread.
            In case if the (basicLogdata(including scenario, message and type) + additionalLogData ) exceeds the CLS server payload for a single request,
            the data will be split into multiple requests.
            And with every request sent to server scenario, message, type and basicLogData will be sent along with possible additionalLogData
            </summary>
            <param name="scenario">Scenario for the log message. This information will be sent with every request to the server</param>
            <param name="message">Message to logged.  This information will be sent with every request to the server</param>
            <param name="type">Type of the log message. This information will be sent with every request to the server</param>
            <param name="basicLogData">Basic Log Data to be sent with every request in case if the request needs to be split into multiple requests.
                                       This information will be sent with every request to the server.
            It is recommended that you key names not to have spaces.</param>
            <param name="additionalLogData">Additional information to be sent to server. This information can be split based on the playload size that CLS service can handle.
                                            But it is ensured that a single key-value pair is never split into multiple requests.
            It is recommended that you key names not to have spaces.</param>
            <param name="callBack">CallBack which will be invoked once the response is received from the Cloud Logging Service</param>
        </member>
        <member name="M:CLSCLientLibrary.Interface.ICloudLoggingService.LogAsync(System.String,CLSCLientLibrary.MessageType,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Action{CLSCLientLibrary.CLSResponse})">
            <summary>
            Uploads data to Cloud Logging Service Asynchronously. This API is preferred if it is invoked from  Main Thread.
            In case if the (basicLogdata(including scenario, message and type) + additionalLogData ) exceeds the CLS server payload for a single request,
            the data will be split into multiple requests.
            And with every request sent to server scenario, message, type and basicLogData will be sent along with possible additionalLogData
            </summary>
            <param name="message">Message to logged.  This information will be sent with every request to the server</param>
            <param name="type">Type of the log message. This information will be sent with every request to the server</param>
            <param name="basicLogData">Basic Log Data to be sent with every request in case if the request needs to be split into multiple requests.
                                       This information will be sent with every request to the server.
             It is recommended that you key names not to have spaces.</param>
            <param name="additionalLogData">Additional information to be sent to server. This information can be split based on the playload size that CLS service can handle.
                                            But it is ensured that a single key-value pair is never split into multiple requests.
             It is recommended that you key names not to have spaces.</param>
            <param name="callBack">CallBack which will be invoked once the response is received from the Cloud Logging Service</param>
        </member>
        <member name="M:CLSCLientLibrary.Interface.ICloudLoggingService.LogSync(System.String,System.String,CLSCLientLibrary.MessageType,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Uploads data to Cloud Logging Service Synchronously. This API is preferred if it is not invoked from  Main Thread. For e.g... from BackGround thread / ThreadPool thread
            In case if the (basicLogdata(including scenario, message and type) + additionalLogData ) exceeds the CLS server payload for a single request,
            the data will be split into multiple requests.
            And with every request sent to server scenario, message, type and basicLogData will be sent along with possible additionalLogData
            </summary>
            <param name="scenario">Scenario for the log message. This information will be sent with every request to the server</param>
            <param name="message">Message to logged.  This information will be sent with every request to the server</param>
            <param name="type">Type of the log message. This information will be sent with every request to the server</param>
            <param name="basicLogData">Basic Log Data to be sent with every request in case if the request needs to be split into multiple requests.
                                       This information will be sent with every request to the server.
             It is recommended that you key names not to have spaces.</param>
            <param name="additionalLogData">Additional information to be sent to server. This information can be split based on the playload size that CLS service can handle.
                                            But it is ensured that a single key-value pair is never split into multiple requests.
             It is recommended that you key names not to have spaces.</param>
        </member>
        <member name="M:CLSCLientLibrary.Interface.ICloudLoggingService.LogSync(System.String,CLSCLientLibrary.MessageType,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Uploads data to Cloud Logging Service Synchronously. This API is preferred if it is not invoked from  Main Thread. For e.g... from BackGround thread / ThreadPool thread
            In case if the (basicLogdata(including scenario, message and type) + additionalLogData ) exceeds the CLS server payload for a single request,
            the data will be split into multiple requests.
            And with every request sent to server scenario, message, type and basicLogData will be sent along with possible additionalLogData
            </summary>
            <param name="message">Message to logged.  This information will be sent with every request to the server</param>
            <param name="type">Type of the log message. This information will be sent with every request to the server</param>
            <param name="basicLogData">Basic Log Data to be sent with every request in case if the request needs to be split into multiple requests.
                                       This information will be sent with every request to the server.
             It is recommended that you key names not to have spaces.</param>
            <param name="additionalLogData">Additional information to be sent to server. This information can be split based on the playload size that CLS service can handle.
                                            But it is ensured that a single key-value pair is never split into multiple requests.
             It is recommended that you key names not to have spaces.</param>
        </member>
        <member name="P:CLSCLientLibrary.Interface.ICloudLoggingService.CurrentCloudLoggingServiceUrl">
            <summary>
            Url for the Cloud Logging Service
            </summary>
        </member>
        <member name="P:CLSCLientLibrary.Interface.ICloudLoggingService.ConfigurationFilepath">
            <summary>
            Path to the Configuration file 
            </summary>
        </member>
        <member name="T:CLSClientLibrary.CLSClientLibraryException">
            <summary>
            This Expection gets thrown to cunsumer of this library.
            </summary>
        </member>
        <member name="M:CLSClientLibrary.CLSClientLibraryException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CLSClientLibrary.CLSClientLibraryException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:CLSClientLibrary.CLSClientLibraryException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor supports inner exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:CLSClientLibrary.CLSClientLibraryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CLSCLientLibrary.ConfigurationContext">
            <remarks/>
        </member>
        <member name="P:CLSCLientLibrary.ConfigurationContext.Appname">
            <remarks/>
        </member>
        <member name="P:CLSCLientLibrary.ConfigurationContext.Appcontext">
            <remarks/>
        </member>
        <member name="P:CLSCLientLibrary.ConfigurationContext.LoggingServiceUrl">
            <remarks/>
        </member>
        <member name="T:CLSCLientLibrary.MessageType">
            <summary>
            Type of the message to be logged
            </summary>
        </member>
        <member name="T:CLSCLientLibrary.Status">
            <summary>
            Status of the response
            </summary>
        </member>
        <member name="T:CLSCLientLibrary.AppName">
            <summary>
            Application which is consuming Cloud Logging Service Library For e.g... AppName can be "qbdt" | "pos" etc...
            </summary>
        </member>
        <member name="T:CLSCLientLibrary.AppContext">
            <summary>
            Context in which Cloud Logging Service API is used. For e.g... Context can be "support" | "tracking" | "fact" etc...
            </summary>
        </member>
        <member name="T:CLSCLientLibrary.Configuration">
            <remarks/>
        </member>
        <member name="P:CLSCLientLibrary.Configuration.TokenList">
            <remarks/>
        </member>
        <member name="P:CLSCLientLibrary.Configuration.Contexts">
            <remarks/>
        </member>
        <member name="T:CLSCLientLibrary.InvalidTokenException">
            <summary>
            Exception raised when Invalid token is passed
            </summary>
        </member>
    </members>
</doc>
